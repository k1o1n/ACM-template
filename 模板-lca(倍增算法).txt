求某棵树上两点u,v的最近公共祖先。

采用倍增算法：
采用类似st表的原理记录每个点的祖先节点：
f[x][y]表示节点x的第2^y个祖先
从根节点开始采用dfs方式填表
转移方程为：f[x][y]=f[f[x][y-1]][y-1]

将u,v之间的深度差记作dis
利用lowbit将每一位分离，根据大小跳跃，最后将较深的那个点跳跃到与较浅的点相同的深度处
开始二分查找跳跃层数：将跳跃步数逐渐变小，直到该情况：此时两节点不相同，而它们的父节点相同，此时便找到了最近公共祖先。
利用lca，可以计算出树上两点间的最小路径

模板：
#include<map>
#define ll long long
#define lowbit(x) (x&(-x))
using namespace std;
map<ll,map<ll,ll>>tree;//树，记录节点的子节点
map<ll,ll>root;//节点的父节点
map<ll,ll>len;//节点深度，从1开始计数
vector<vector<ll>>st;//记录节点的2^n级祖先
void get_st(point){
	st[point].push_back(root[point]);//传入point的2^0级祖先
	for(ll q=1;(1<<q)<len[point];++q){
		st[point].push_back(st[st[point][i-1]][i-1]);//point的2^i级祖先等于point的2^(i-1)级祖先的2^(i-1)级祖先
	}
	for(auto it:tree[point]){
		get_st(it.first);//dfs搜索point的子节点并完善st表
	}
}//获取st表过程,传入的节点为根节点
ll lca(ll p1,ll p2){
	if(len[p1]>len[p2]){
		ll temp=p1;
		p1=p2;
		p2=temp;
	}//将较深的节点调为p2
	ll dis=len[p2]-len[p1];
	while(dis){
		p2=st[p2][__lg(lowbit(dis))];
		dis-=lowbit(dis);
	}//调为同级
	if(p1==p2){
		return p1;	
	}//排除未跳跃就相等的情况
	while(true){
		if(root[p1]==root[p2]){
			return root[p1]//找到最近公共祖先
		}
		else{
			ll fin=__lg(len[p1]-1);//最大可跳跃级数
                	while(stable[p1][fin]==stable[p2][fin]){
                    		--fin;
                	}//找到此时最大的可跳跃层数，满足跳跃后两点没有重合
                	p1=stable[p1][fin];//跳跃p1点
                	p2=stable[p2][fin];//跳跃p2点
		}
	}
}//lca过程
