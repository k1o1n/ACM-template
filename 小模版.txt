#include<iostream>
#include<vector>
#include<map>
#include<cmath>
#define lowbit(x) (x&(-x))
#define ll long long
using namespace std;
#define work_once \
ll t = 1;\
while (t--) {\
	solve();\
}
#define work_while \
ll t;\
cin >> t;\
while (t--) {\
	solve();\
}
vector<ll>st_create_arr;//需要修改为以1开始计数
#define DEFINE_ST
struct ST {
	\
		vector<vector<ll>>st_arr; \
		ll len; \
		ST(ll _len) :len(_len) {
		\
			st_arr.resize(len + 1); \
			for (ll q = len; q > 0; --q) {
				\
					st_arr[q].push_back(st_create_arr[q]); \
					for (ll i = 1; (1ll << i) + q - 1 <= len; ++i) {
						\
							st_arr[q].push_back(max(st_arr[q][i - 1], st_arr[q + (1ll << (i - 1))][i - 1])); \
					}\
			}\
	}\
		ll search(ll Left, ll Right) {
							\
								return max(st_arr[Left][log2(Right - Left + 1)], st_arr[Right - (1 << ll(log2(Right - Left + 1))) + 1][log2(Right - Left + 1)]); \
						}\
};//可重复区间问题（max模板）
#define DEFINE_BIT \
struct BIT {\
	ll len;\
	vector<ll>tree;\
	vector<ll>pre;\
	BIT() {}\
	BIT(ll _len) {\
		len = _len;\
		tree.resize(len + 1);\
		pre.resize(len + 1);\
	}\
	void plus(ll pos, ll value) {\
		pre[pos] += value;\
		for (; pos <= len; pos += lowbit(pos)) {\
			tree[pos] += value;\
		}\
	}\
	void change(ll pos, ll value) {\
		plus(pos, value - pre[pos]);\
	}\
	ll range(ll pos) {\
		ll sum = 0;\
		for (; pos; pos -= lowbit(pos)) {\
			sum += tree[pos];\
		}\
		return sum;\
	}\
	ll range(ll l, ll r) {\
		return range(r) - range(l - 1);\
	}\
	ll point_value(ll pos) {\
		return pre[pos];\
	}\
};
#define DEFINE_exgcd \
ll exgcd(ll a, ll b, ll& x, ll& y) {\
	if (!b) {\
		x = 1;\
		y = 0;\
		return a;\
	}\
	ll GCD = exgcd(b, a % b, y, x);\
	y -= a / b * x;\
	return GCD;\
}\
#define DEFINE_gcd \
ll gcd(ll a, ll b) {\
	return (b ? gcd(b, a % b) : a);\
}
ll pi = 1e9 + 7;
#define DEFINE_qpow \
ll qpow(ll a, ll b, ll PI = 1e9 + 7) {\
	ll res = 1;\
	while (b) {\
		if (b & 1)res = res * a % PI;\
		b >>= 1;\
		a = a * a % PI;\
	}\
	return res;\
}
#define DEFINE_CA \
struct CA {\
	ll pi;\
	ll n;\
	ll qpow(ll a, ll b) {\
		ll res = 1;\
		while (b) {\
			if (b & 1)res = res * a % pi;\
			b >>= 1;\
			a = a * a % pi;\
		}\
		return res;\
	}\
	vector<ll>f;\
	CA(ll _n, ll _pi = 1e9 + 7) {\
		pi = _pi;\
		n = _n;\
		f.resize(n + 5);\
		f[0] = 1;\
		for (ll q = 1; q <= n; ++q) {\
			f[q] = f[q - 1] * q % pi;\
		}\
	}\
	ll c(ll a, ll b) {\
		return f[a] * qpow(f[b], pi - 2) % pi * qpow(f[a - b], pi - 2) % pi;\
	}\
	ll a(ll a, ll b) {\
		return c(a, b) * f[b] % pi;\
	}\
};
#define DEFINE_get_prime \
vector<ll>prime;\
vector<bool>prime_check;\
void get_prime(ll prime_number = 100005) {\
	prime_check.resize(prime_number + 1);\
	for (ll q = 2; q <= prime_number; ++q) {\
		if (!prime_check[q]) {\
			prime.push_back(q);\
		}\
		for (ll i = 0; i < prime.size() && q * prime[i] <= prime_number; ++i) {\
			prime_check[q * prime[i]] = true;\
			if (!(q % prime[i])) {\
				break;\
			}\
		}\
	}\
}
#define DEFINE_fsmod \
ll fsmod(ll a, ll b, ll PI = 1e9 + 7) {\
	ll res = 1;\
	{\
		ll aa = b;\
		ll bb = PI - 2;\
		while (bb) {\
			if (bb & 1)res = res * aa % PI;\
			bb >>= 1;\
			aa = aa * aa % PI;\
		}\
	}\
	return a * res % PI;\
}
void solve() {
	return;
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	work_once
		//work_while
		return 0;
}
