定义数组a
sum(l,r)：表示数组a的连续子数组[al,al+1,……,ar-1,ar]的元素总和，即Σ(i=1~r)ai；
mex(l,r)：表示数组a的连续子数组[al,al+1,……,ar-1,ar]中没有出现的最小非负整数；
f(l,r,x)：当sum(l,r)<=x时，f(l,r,x)=mex(l,r)；否则，f(l,r,x)=0。
求Σ(l=1~n)Σ(r=1~n)f(l,r,x)

输入描述：
第一行输入两个整数n,x(1<=n,x<=1e5)，表示数组长度和整数x的值
第二行输入n个整数表示数组a

分析：
当f(l,r,x)有贡献时：假设其贡献为d则d*(d-1)/2<=mex(l,r)<=x
则d<=(2x)^1/2
故考虑贡献时从n向1递减遍历，遍历以当前点位子数组开头会有多少贡献，考量方法是在该节点后[0,(2x)^1/2]首次出现的节点，对此进行跳跃
时间复杂度最后为o(nx^1/2)

#include<iostream>
#include<vector>
#include<map>
#include<cmath>
#define ll long long
using namespace std;
int main(){
    ios::sync_with_stdio(0);
    cin.tie(nullptr);
    cout.tie(nullptr);
    ll n,x;
    cin>>n>>x;
    vector<ll>arr(n+1);
    vector<ll>sum(n+1);
    vector<ll>check(n+1);
    for(ll q=1;q<=n;++q){
        cin>>arr[q];
        sum[q]=sum[q-1]+arr[q];
    }
    for(ll q=1;q<=n;++q){
        ll i;
        if(check[q-1]<3){
            i=q;
        }
        else{
            i=q-2+check[q-1];
        }
        for(;i<=n;++i){
            if(sum[i]-sum[q-1]>x){
                check[q]=i-q;
                break;
            }
            else{
                if(i==n){
                    check[q]=i-q+1;
                }
            }
        }
    }
    ll answer=0;
    x=sqrt((double)2*(double)x);
    vector<ll>search(x+1);
    for(ll q=n;q>=1;--q){
        if(arr[q]<=x){
            search[arr[q]]=q;
        }
        ll p,memory;
        if(!check[q]){
            continue;
        }
        if(search[0]){
            p=search[0];
            memory=0;
            if(p>check[q]+q-1){
                continue;
            }
            for(ll i=1;i<=x;++i){
                if(!search[i]){
                    answer+=(check[q]+q-p)*(memory+1);
                    break;
                }
                else{
                    if(search[i]>check[q]+q-1){
                        answer+=(check[q]+q-p)*(memory+1);
                        break;
                    }
                    else{
                        if(search[i]<=p){
                            memory++;
                            if(i==x){
                                answer+=(check[q]+q-p)*(memory+1);   
                            }
                        }
                        else{
                            answer+=(search[i]-p)*(memory+1);
                            memory++;
                            p=search[i];
                            if(i==x){
                                answer+=(check[q]+q-p)*(memory+1);
                            }
                        }
                    }
                }
            }
        }
    }
    cout<<answer;
}