一棵n 个节点的树（编号从1到n），以1 号点为根；请计算Σ(u=1~n)Σ(v=1~v)min(u×v,dist(u,v)) 的值。
注意：u,v 分别表示树上两个节点的编号；dist(u,v)表示节点u到节点v的简单路径上的边的个数；
1<=u,v<=n<=1e5

分析：
先算出Σdist(u,v)：按边分析，每一条边的贡献是将该边切断后，u、v所在的连通块大小的乘积
再算出u*v<dist(u,v),将多出来的部分减掉：若u*v<dist(u,v)则u*v<dist(u,v)<=n,故只需枚举u*v<=n的情况即可，用调和级数可以证明时间复杂度为o(nlogn)
计算dist(u,v)采用lca的倍增算法
最后结果*2

#include<iostream>
#include<map>
#include<vector>
#define lowbit(x) (x&(-x))
#define ll long long
using namespace std;
map<ll,map<ll,ll>>tree;
map<ll,map<ll,ll>>relation;
map<ll,ll>root;
vector<ll>son_num;
vector<ll>len;
ll dist=0,n;
vector<vector<ll>>stable;
ll lca(ll p1,ll p2){
    if(len[p1]>len[p2]){
        ll temp=p1;
        p1=p2;
        p2=temp;
    }
    ll dis=len[p2]-len[p1];
    ll dis1=0,dis2=dis;
    while(dis){
        p2=stable[p2][__lg(lowbit(dis))];
        dis-=lowbit(dis);
    }
    if(p1==p2){
        return dis2;
    }
    else{
        while(true){
            if(root[p1]==root[p2]){
                return dis1+dis2+2;
            }
            else{
                ll fin=__lg(len[p1]-1);
                while(stable[p1][fin]==stable[p2][fin]){
                    --fin;
                }
                dis1+=(1<<fin);
                dis2+=(1<<fin);
                p1=stable[p1][fin];
                p2=stable[p2][fin];
            }
        }
    }
}
void dfsst(ll point){
    if(root.find(point)!=root.end()){
        stable[point].push_back(root[point]);
        for(ll i=1;(1<<i)<len[point];++i){
            stable[point].push_back(stable[stable[point][i-1]][i-1]);
        }
    }
    for(auto it:tree[point]){
        dfsst(it.first);
    }
}
void create(ll point,ll length){
    len[point]=length;
    for(auto it:relation[point]){
        tree[point][it.first]++;
        root[it.first]=point;
        relation[it.first].erase(point);
        create(it.first,length+1);
    }
}
ll dfsnum(ll point){
    ll num=1;
    for(auto it:tree[point]){
        num+=dfsnum(it.first);
    }
    son_num[point]=num;
    return num;
}
void dfsdist(ll point){
    for(auto it:tree[point]){
        dist+=(n-son_num[it.first])*son_num[it.first];
        dfsdist(it.first);
    }
}
int main(){
    cin>>n;
    len.resize(n+1);
    son_num.resize(n+1);
    stable.resize(n+1);
    dfsst(1);
    for(ll q=0,x,y;q<n;++q){
        cin>>x>>y;
        relation[x][y]++;
        relation[y][x]++;
    }
    create(1,1);
    dfsnum(1);
    dfsdist(1);
    dfsst(1);
    for(ll q=1;q<=n;++q){
        for(ll i=q+1;q*i<=n;++i){
            ll memory=lca(q,i);
            if(memory>q*i){
                dist-=memory-q*i;
            }
        }
    }
    cout<<dist*2;
}